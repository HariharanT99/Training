@model Model.ViewModel.EntryViewModel

@{
    ViewBag.Title = "CreateEntry";
}

<h1>CreateEntry</h1>

<h4>Entry</h4>
<hr />

@using (Html.BeginForm("Entry", "Employee", FormMethod.Post))
{
    <div class="container">
        <div class="row">
            <div class="col-12 text-center">
                <h3>Entry Form</h3>
            </div>
        </div>

        <div class="row justify-content-center mt-3">
            <div class="col-12 col-sm-2 align-self-center">
                @Html.LabelFor(model => model.Date, new { @class = "control-lable" })
            </div>
            <div class="col-12 col-sm-4">
                <input class="form-control" type="date" data-val="true" data-val-required="Date is Required" id="date" name="date" />
            </div>
            @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
        </div>

        <div class="row justify-content-center mt-3">
            <div class="col-12 col-sm-2 align-self-center">
                @Html.LabelFor(model => model.InTime, new { @class = "control-lable" })
            </div>
            <div class="col-12 col-sm-4 ">
                <input class="form-control" type="time" data-val="true" data-val-required="InTime is Required" id="intime" name="intime" />
            </div>
            @Html.ValidationMessageFor(model => model.InTime, "", new { @class = "text-danger" })
        </div>

        <div class="row justify-content-center mt-3">
            <div class="col-12 col-sm-2 align-self-center">
                @Html.LabelFor(model => model.OutTime, new { @class = "control-lable" })
            </div>
            <div class="col-12 col-sm-4">
                <input class="form-control" type="time" data-val="true" data-val-required="OutTime is Required" id="outtime" name="outtime" />
            </div>
            @Html.ValidationMessageFor(model => model.OutTime, "", new { @class = "text-danger" })
        </div>

        <div class="row justify-content-center mt-3">
            <div class="col-12 col-sm-8">
                <table id="BreakTable" class="table table-striped table-sm">
                    <thead>
                        <tr>
                            <th>
                                BreakFrom
                            </th>
                            <th>
                                BreakTo
                            </th>
                            <th>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.BreakList.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.EditorFor(model => model.BreakList[i].BreakIn, new { htmlAttributes = new { @class = "form-control" } })
                                </td>
                                <td>
                                    @Html.EditorFor(model => model.BreakList[i].BreakOut, new { htmlAttributes = new { @class = "form-control" } })
                                </td>
                                <td>

                                    <button id="btnadd-@i" type="button" class="btn btn-sm btn-secondary visible"
                                            onclick="AddItem(this)">
                                        Add
                                    </button>
                                    <button id="btnremove-@i" type="button" class="btn btn-sm btn-danger invisible"
                                            onclick="DeleteItem(this)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <input type="hidden" id="hasLastIndex" value="0" />

            @*@for (int i = 0; i < Model.BreakList.Count; i++)
                {
                    <input type="hidden" id="Id" value="@Model.Id" />

                    //<input hidden name="entryid@{i}" value="@{Model.Id} " />
                    <div class="col-12 col-sm-6 offset-sm-3">
                        @Html.EditorFor(model => model.BreakList[i].BreakIn, new { htmlAttributes = new { @class = "form-comtrol" } })
                        @Html.EditorFor(model => model.BreakList[i].BreakOut, new { htmlAttributes = new { @class = "form-comtrol" } })
                    </div>
                    <div class="col-12 col-sm-3">
                        <button id="btnadd-@i" type="button" class="btn btn-sm btn-secondary visible"
                                onclick="AddItem(this)" style="left:90%;position:absolute;">
                            Add
                        </button>
                        <button id="btnremove-@i" type="button" class="btn btn-sm btn-danger invisible"
                                onclick="DeleteItem(this)" style="left:90%;position:absolute;">
                            Delete
                        </button>
                    </div>
                }

                <input type="hidden" id="hasLastIndex" value="0" />*@
        </div>
    </div>
}


@section Scripts{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">

        function DeleteItem(btn) {
            $(btn).closest('tr').remove();
        }

        function AddItem(btn) {
            var table = document.getElementById('BreakTable');
            var rows = table.getElementsByTagName('tr');

            var rowOuterHtml = rows[rows.length - 1].outerHTML;

            var lastrowIdx = document.getElementById('hasLastIndex').value;

            var nextrowIdx = eval(lastrowIdx) + 1;

            document.getElementById('hasLastIndex').value = nextrowIdx;

            rowOuterHtml = rowOuterHtml.replaceAll('_' + lastrowIdx + '_', '_' + nextrowIdx + '_');
            rowOuterHtml = rowOuterHtml.replaceAll('[' + lastrowIdx + ']', '[' + nextrowIdx + ']');
            rowOuterHtml = rowOuterHtml.replaceAll('_' + lastrowIdx, '_' + nextrowIdx);

            var newRow = table.insertRow();
            newRow.innerHTML = rowOuterHtml;

            var btnAddID = btn.id;

            var btnDeleteID = btnAddID.replaceAll('btnadd', 'btnremove');

            var delbtn = document.getElementById(btnDeleteID);
            delbtn.classList.add('visible');
            delbtn.classList.remove('invisible');

            var addbtn = document.getElementById(btnAddID);
            addbtn.classList.remove('visible');
            addbtn.classList.add('invisible');

        }
    </script>
}